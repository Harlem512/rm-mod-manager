if global.rmml {
  return global.rmml.warn("bypassed rmml loader")
}

-- outside of the rmml global for fast access
-- the currently running mod
global.rmml_current_mod = "rmml"
-- event_key = "controller_events_create" | "basic_events_other_room_start"
-- mod_name = "my_mod"
-- type: { [event_key: string]: { [mod_name: string]: function } }
global.rmml_map = {}

-- MARK: DATA
global.rmml = {
  -- internal version number
  version: 6.2,
  -- enables developer features
  dev: false,

  -- rmml's mod list, stored as mod names names
  mod_list: [],
  -- a string containing any warnings thrown during the loading process (separated by pipes `|`)
  warnings: "",

  -- object names
  objects: ["controller", "instance", "basic", "player", "enemy", "hitbox"],
  -- event names
  events: [
    "create", "cleanup", "step_begin", "step", "step_end", "draw_begin", "draw", "draw_end", "draw_gui_begin", "draw_gui", "draw_gui_end", "alarm_0", "alarm_1", "alarm_2", "destroy", "animation_end",
    -- index >=16 needs `_events_other_`, otherwise `_events_`
    "user_0", "user_1", "user_2", "room_start", "room_end"
  ],

  -- rmml's log file
  log_name: "mods/log.txt",
  -- clears the rmml log
  clear: fun () {
    let log = file_text_open_write(global.rmml.log_name)
    file_text_write_string(log, "---LOGGING START---\n")
    file_text_close(log)
  },
  -- logs the passed message as a string
  log: fun (msg) {
    let time = get_timer() // 1000
    let log = file_text_open_append(global.rmml.log_name)
    file_text_write_string(log,
      string(time)
      + "\t| "
      + global.rmml_current_mod
      + "\t| "
      + string(msg)
      + "\n"
    )
    file_text_close(log)
  },
  -- crashes the game with a message
  throw: fun (msg) {
    let str = "\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nRMML ERROR   RMML ERROR   RMML ERROR   RMML ERROR   RMML ERROR   RMML ERROR   RMML ERROR\n    Suspect Mod: " + string(global.rmml_current_mod) + "\n" + string(msg) + "\n.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
    !str
  },
  -- adds a warning
  warn: fun (msg) {
    global.rmml.warnings += "|" + string(msg)
    -- crash the game in dev mode
    if global.rmml.dev {
      global.rmml.throw(msg)
    } else {
      global.rmml.log (["WARN::", msg])
    }
  },

  -- registers the passed function with rmml
  register: undefined, -- fun (object, event, mod, fn)
  -- unloads the passed mod, deleting omod_controller and removing all entries
  -- this does not remove inherited mods (ie `# instance my_mod2`)
  unload: undefined, -- fun (mod_name)
  -- wraps the `try` function in a try-catch block, passing a-h as arguments
  -- if exception, catch is called (if it's a function)
  try_catch: undefined, -- fun (try, catch, a,b,c,d,e,f,g,h)

  -- set of all mods that have been loaded. used by rmml for game_start event
  -- this is not reset when the mods are reloaded
  __mod_set: {},
  -- list of all mods that need controllers
  __mod_controllers: {},
  -- list of mods, in load order
  __mod_controllers_load_order: [],
  -- quick-create event code, sets self.mod_name and returns
  __quick_create: ds_map_find_value(global.mod_map, "basic_events_create"),
  -- cached mod maps, for quicker mod loading on return to menu
  -- rm's cache of `global.mod_map`, a ds_map
  __mod_map_cache: undefined,
  -- rmml's cache of `global.rmml_map`, a struct
  __rmml_mod_map_cache: undefined,
}

-- MARK: Try-Catch
live_snippet_call(live_snippet_create("
global.rmml.try_catch = function (_try, _catch, a,b,c,d,e,f,g,h) {
  method_get_self(global.rmml.try_catch).callTime = infinity
  try {
    return _try(a,b,c,d,e,f,g,h)
  } catch (err) {
    return _catch ? _catch(err,a,b,c,d,e,f,g,h) : err
  }
}"))

-- MARK: Shallow Clone
-- clones a struct of structs
global.rmml.clone = fun (struct) {
  method_get_self(global.rmml.clone).callTime = infinity
  let new_struct = {}
  let event_names = variable_struct_get_names(struct)
  let event_index = array_length(event_names) - 1
  while event_index >= 0  {
    let event = event_names[event_index]
    -- add new struct
    new_struct[event] = {}
    let mod_names = variable_struct_get_names(struct[event])
    let mod_index = array_length(mod_names) - 1
    while mod_index >= 0 {
      let mod = mod_names[mod_index]
      new_struct[event][mod] = struct[event][mod]
      mod_index -= 1
    }
    event_index -= 1
  }
  return new_struct
}

-- MARK: Register
let raw_code_normal = "
e=global.rmml_map[\"INJECT\"][self.mod_name]
if e{
c=global.rmml_current_mod
global.rmml_current_mod=self.mod_name
e.setSelf(self)
e()
global.rmml_current_mod=c}"
-- debug exec function
-- let raw_code_normal = "
-- ev=\"INJECT\"
-- if string_pos(\"enemy\", ev) { global.rmml.log([instance_exists(self), self, self.mod_name]) }
-- e=global.rmml_map[ev][self.mod_name]
-- if e{
-- c=global.rmml_current_mod
-- global.rmml_current_mod=self.mod_name
-- e.setSelf(self)
-- e()
-- global.rmml_current_mod=c}"
let raw_code_mod_name = "if self.mod_name == undefined { self.mod_name=global.rmml_current_mod }"

global.rmml.__HIR = [
  -- non-create, normal objects
  global.__catspeak__.parseString(raw_code_normal),
  -- non-create, player
  global.__catspeak__.parseString("with omod_player{" + raw_code_normal + "}"),
  -- create, normal
  global.__catspeak__.parseString(raw_code_mod_name + raw_code_normal),
  -- create, player
  global.__catspeak__.parseString("with omod_player{" + raw_code_mod_name + raw_code_normal + "}"),
]

global.rmml.__HIR_path = [
  global.rmml.__HIR[0].functions[0].root.terms[0].value.collection.key,
  global.rmml.__HIR[1].functions[0].root.body.terms[0].value.collection.key,
  global.rmml.__HIR[2].functions[0].root.terms[1].value.collection.key,
  global.rmml.__HIR[3].functions[0].root.body.terms[1].value.collection.key,
  -- DEBUG
  -- global.rmml.__HIR[0].functions[0].root.terms[0].value,
  -- global.rmml.__HIR[1].functions[0].root.body.terms[0].value,
  -- global.rmml.__HIR[2].functions[0].root.terms[1].value,
  -- global.rmml.__HIR[3].functions[0].root.body.terms[1].value,
]

global.rmml.register = fun (object, event, mod, fn) {
  method_get_self(global.rmml.register).callTime = infinity
  if
    (object == undefined and event == undefined)
    or (object == "" and event == "")
  {
    if !global.rmml.__mod_set[mod] {
      global.rmml.log(["Game start for", mod])
      let cur = global.rmml_current_mod
      global.rmml_current_mod = mod

      if global.rmml.dev {
        fn()
      } else {
        global.rmml.try_catch(fn, fun (e, mod) {
          global.rmml.warn(["Gamestart Fail", mod, e])
        }, mod)
      }
      
      global.rmml_current_mod = cur
      global.rmml.__mod_set[mod] = true
    }
    return
  }

  -- build event key
  let o_index = __scribble_array_find_index(global.rmml.objects, object)
  let e_index = __scribble_array_find_index(global.rmml.events, event)

  -- check for invalid object/event names
  if o_index == -1 or e_index == -1 {
    global.rmml.warn(["Invalid object/event for register", object, event, o_index, e_index, mod])
    return
  }

  -- ev_key is a key used by `global.mod_map`
  let ev_key = object + (if e_index >= 16 { "_events_other_" } else { "_events_" }) + event

  -- create RM mod_map entry
  if !global.rmml_map[ev_key] {
    -- pick which of the three HIR to use
    let index = (o_index == 3) + (e_index == 0) * 2
    -- get hir
    let hir = global.rmml.__HIR[index]
    -- update event key through HIR injection
    global.rmml.__HIR_path[index].value = ev_key

    -- add compiled function to rm mod map
    let fn = global.__catspeak__.compile(hir)
    ds_map_set(global.mod_map, ev_key, fn)
    global.rmml_map[ev_key] = {}
    global.rmml.log(["Created Event", ev_key, mod ])
  }

  -- register event with rmml
  if global.rmml_map[ev_key][mod] {
    global.rmml.warn(["Overwrote key", ev_key, mod])
  }
  global.rmml.log(["Registered Event", ev_key, mod])
  global.rmml_map[ev_key][mod] = fn

  -- check if we need to add a controller
  if o_index == 0 and !global.rmml.__mod_controllers[mod] {
    global.rmml.log(["Need to add controller for",  mod])
    global.rmml.__mod_controllers[mod] = true
    array_push(global.rmml.__mod_controllers_load_order, mod)
  }
}

-- MARK: Unload
global.rmml.unload = fun (mod_name) {
  method_get_self(global.rmml.unload).callTime = infinity
  if mod_name == undefined {
    mod_name = global.rmml_current_mod
  }

  global.rmml.log(["unloading", mod_name])

  -- destroy first, so destroy/cleanup events run
  with omod_controller {
    if self.mod_name == mod_name {
      instance_destroy(self)
    }
  }

  -- rip keys from global.mod_map
  let keys = variable_struct_get_names(global.rmml_map)
  let i = 0
  while i < array_length(keys) {
    let key = keys[i]
    struct_remove(global.rmml_map[key], mod_name)
    -- rip data from mose and rmml mod maps
    if array_length(variable_struct_get_names(global.rmml_map[key])) == 0 {
      struct_remove(global.rmml_map, key)
      ds_map_delete(global.mod_map, key)
    }
    i += 1
  }
}

-- MARK: Load INI
-- loads the passed file path as an ini mod
global.rmml.__load_ini_path = fun (ini_path, mod_name) {
  method_get_self(global.rmml.__load_ini_path).callTime = infinity
  ini_open("mods/rmml/" + ini_path)
  let objects = global.rmml.objects
  let events = global.rmml.events

  let oi = 0
  while oi < 6 {
    let object = objects[oi]
    if ini_read_string("object_list", object, "") == "enabled" {
      let header = object + "_events"
      let ei = 0
      while ei < 21 {
        let event = events[ei]
        let code = ini_read_string(header, event, "")
        if code != "" {
          let parsed = global.__catspeak__.parseString(code)
          let compiled = global.__catspeak__.compile(parsed)
          global.rmml.register(object, event, mod_name, compiled)
        }
        ei += 1
      }
    }
    oi += 1
  }

  ini_close()
}

-- MARK: Load MD
-- loads the passed file path as a md mod
global.rmml.__load_md_path = fun (md_path, mod_name) {
  method_get_self(global.rmml.__load_md_path).callTime = infinity
  let full_buff = buffer_load("mods/rmml/" + md_path)

  let mod_file = file_text_open_read("mods/rmml/" + md_path)
  let mod_override = mod_name
  let obj = undefined
  let event = undefined
  -- 0: false, 1: default, 2: js parser
  let code_mode = 0
  let in_comment = false

  let code_line_number = 0
  let code_offset = 0
  let buffer_offset = 0
  let line_count = 0
  while !file_text_eof(mod_file) {
    line_count += 1
    let raw_line = file_text_readln(mod_file)
    let line = string(string_trim(raw_line))
    let line_bytes = string_byte_length(raw_line)
    buffer_offset += line_bytes

    -- empty lines get skipped if they're not code sections
    if line == "" and code_mode == 0 {
      continue
    }

    -- comment handler
    if in_comment {
      if (string_ends_with(line, "-->")) {
        in_comment = false
      }
    -- we're in code mode
    } else if code_mode != 0 {
      if string_starts_with(line, "```") {
        let bf_line_start = buffer_offset - line_bytes

        if global.rmml.dev {
          -- backfill with newlines (10)
          buffer_fill(full_buff, code_offset - code_line_number, buffer_u8, 10, code_line_number)
        } else {
          code_line_number = 0
        }

        let parsed = undefined

        -- js needs string replacement before being parsed
        if code_mode == 2 {
          -- add null terminator
          buffer_poke(full_buff, bf_line_start, buffer_u8, 0b0)
          -- seek read head
          buffer_seek(full_buff, buffer_seek_start, code_offset - code_line_number)
          -- rip string
          let code = buffer_read(full_buff, buffer_string)
          -- replace js syntax with catspeak syntax
          code = string_replace_all(code, "function(", "fun(")
          code = string_replace_all(code, "type(", "typeof(")
          code = string_replace_all(code, "&&", " and ")
          code = string_replace_all(code, "||", " or ")
          code = string_replace_all(code, "//", "--")
          parsed = global.__catspeak__.parseString(code)
        } else {
          parsed = global.__catspeak__.parse(full_buff,
            -- OFFSET: subtract line number (for new lines)
            code_offset - code_line_number,
            -- SIZE: add line number for new lines
            bf_line_start - code_offset + code_line_number
          )
        }

        -- compile and register catspeak
        let compiled = global.__catspeak__.compile(parsed)
        global.rmml.register(obj, event, mod_override, compiled)

        -- end of code
        code_mode = 0
      }
    -- h1, an object
    } else if string_starts_with(line, "# ") {
      let head = string_split(string_split(line, "# ")[1], " ")

      obj = head[0]
      mod_override = if array_length(head) > 1 { head[1] } else { mod_name }
    -- h2, some event handler
    } else if string_starts_with(line, "## ") {
      event = string_split(line, "## ")[1]
    -- code block
    } else if string_starts_with(line, "```") {
      if string_starts_with(line, "```js") {
        -- javascript
        code_mode = 2
      } else {
        -- catspeak
        code_mode = 1
      }
      code_offset = buffer_offset
      code_line_number = line_count
    } else if string_starts_with(line, "<!--") {
      -- catch one line comments
      in_comment = !string_ends_with(line, "-->")
    }
  }

  file_text_close(mod_file)
  buffer_delete(full_buff)
}

-- MARK: Load CSV
-- object event filename ?modname
global.rmml.__load_csv_path = fun (path, mod_name) {
  method_get_self(global.rmml.__load_csv_path).callTime = infinity
  let grid = load_csv("mods/rmml/" + path)

  if !grid or !ds_exists(grid, ds_type_grid) {
    global.rmml.warn(["csv mod could not be loaded", mod_name, path])
    return
  }

  if ds_grid_width(grid) < 3 {
    global.rmml.warn(["CSV mod has too few columns", mod_name, path])
    ds_grid_destroy(grid)
    return
  }

  let use_modname = ds_grid_width(grid) > 3

  let h = ds_grid_height(grid)
  let y = 0
  while y < h {
    let path = string(ds_grid_get(grid, 2, y))
    let code = if string_starts_with(path, "do {") {
      global.rmml.log(["Inline code", mod_name, path])
      -- returned, inline code
      global.__catspeak__.compile(global.__catspeak__.parseString(path))
    } else {
      let full_path = "mods/rmml/" + mod_name + "/" + path

      if !file_exists(full_path) {
        global.rmml.warn(["CSV mod path missing", full_path, y])
        y += 1
        continue
      }

      -- returned, code file
      global.bootstraps(full_path)
    }

    let name = mod_name
    if use_modname {
      let get = ds_grid_get(grid, 3, y)
      if get != undefined and get != 0 {
        name = get
      }
    }

    global.rmml.register(
      ds_grid_get(grid, 0, y), ds_grid_get(grid, 1, y),
      name, code
    )
    y += 1
  }

  ds_grid_destroy(grid)
}

-- MARK: Compile modlist
global.rmml.__compile_mod_list = fun(list) {
  method_get_self(global.rmml.__compile_mod_list).callTime = infinity
  if !file_exists(list) {
    global.rmml.warn("Missing list" + list)
    return
  }

  let i = 0
  let mods = []
  let f = file_text_open_read(list)
  while !file_text_eof(f) {
    let mod_path = string(string_trim(file_text_readln(f)))

    if !string_starts_with(mod_path, "#")
      and mod_path != ""
      and mod_path != "rmml.meow"
    {
      array_push(mods, mod_path)
    }
  }
  file_text_close(f)
  return mods
}

-- MARK: Load file
-- valid files:
--   path.md
--   path.ini
--   path.meow
--   thing  -> thing/thing.md or thing/index.md or thing/index.csv
global.rmml.__load_file = fun (path) {
  method_get_self(global.rmml.__load_file).callTime = infinity
  let name

  global.rmml.log("LOAD mod " + path)
  if file_exists("mods/rmml/" + path) {
    -- /mods/rmml/my_mod.md
    if string_ends_with(path, ".md") {
      name = string(string_split(path, ".md")[0])
      global.rmml.__load_md_path(path, name)
    -- /mods/rmml/old.ini
    } else if string_ends_with(path, ".ini") {
      name = string(string_split(path, ".ini")[0])
      global.rmml.__load_ini_path(path, name)
    -- /mods/rmml/script.meow
    } else if string_ends_with(path, ".meow") {
      name = string(string_split(path, ".meow")[0])
      let c = global.rmml_current_mod
      global.rmml_current_mod = name
      global.bootstraps("mods/rmml/" + path)()
      global.rmml_current_mod = c
    -- /mods/rmml/mod.whatever
    } else {
      name = path
      global.rmml.__load_md_path(path, name)
    }
  } else if directory_exists("mods/rmml/" + path) {
    name = path
    let dir = "mods/rmml/" + path + "/"
    -- /mods/rmml/my_mod/my_mod.md
    if file_exists(dir + path + ".md") {
      global.rmml.__load_md_path(path + "/" + path + ".md", name)
    -- /mods/rmml/my_mod/index.md
    } else if file_exists(dir + "index.md") {
      global.rmml.__load_md_path(path + "/index.md", name)
    -- /mods/rmml/my_mod/index.csv
    } else if file_exists(dir + "index.csv") {
      global.rmml.__load_csv_path(path + "/index.csv", name)
    } else {
      global.rmml.warn("Missing " + dir)
      return
    }
  } else {
    global.rmml.warn("Missing " + path)
    return
  }

  array_push(global.rmml.mod_list, name)
  global.rmml.log("END LOAD mod " + name)
}

-- MARK: Add Controllers
-- adds a controller for each mod that needs one
global.rmml.__add_controllers = fun () {
  method_get_self(global.rmml.__add_controllers).callTime = infinity
  let ar = global.rmml.__mod_controllers_load_order
  let n = array_length(ar)
  let i = 0
  while i < n {
    global.rmml.log(["ADDING controller for", ar[i]])
    if global.rmml.dev {
      -- dev mode, no try-catch
      instance_create_depth(0,0,0, omod_controller, {
        mod_name: ar[i]
      })
    } else {
      -- wrap in a try-catch to (hopefully) prevent startup crashes
      global.rmml.try_catch(
        fun (name) {
          instance_create_depth(0,0,0, omod_controller, {mod_name: name})
        },
        fun (e, name) {
          global.rmml.warn(["Err loading mod", name, e])
        },
        ar[i]
      )
    }
    i += 1
  }
}

-- MARK: Boot loader
global.rmml.__boot = fun() {
  -- loading music
  let loading_music = audio_play_sound(snd_music_tea_party, 0, true, 1)

  -- disable runtime limit
  method_get_self(ds_map_find_value(global.mod_map,"controller_events_create")).callTime = infinity
  method_get_self(global.rmml.__boot).callTime = infinity

  -- blow up omod_meta and initial controller
  instance_destroy(omod_meta)
  instance_destroy(omod_controller)

  -- free the global mod map (just in case)
  ds_map_delete(global.mod_map)
  -- free the old mod_map
  if global.__mod_map_old {
    ds_map_delete(global.__mod_map_old)
  }
  -- create a new mod_map
  global.mod_map = ds_map_create()
  global.__mod_map_old = global.mod_map

  -- clear volatile rmml globals (uncached)
  global.rmml_current_mod = "rmml"
  global.rmml.warnings = ""

  -- cache exists, load cache data
  if global.rmml.__mod_map_cache {
    global.rmml.log("Cached, skipping loading")
    ds_map_copy(global.mod_map, global.rmml.__mod_map_cache)
    global.rmml_map = global.rmml.clone(global.rmml.__rmml_mod_map_cache)

    global.rmml.__add_controllers()
    global.rmml.log(["controller count", instance_number(omod_controller)])
    global.rmml.log(global.rmml_map)
    global.rmml.log(json_encode(global.mod_map))
    audio_stop_sound(loading_music)
    return
  }

  -- clear volatile rmml globals (cached)
  global.rmml_map = {}
  global.rmml.mod_list = []

  global.rmml.log("--- Load Mods ---")

  -- add quick create events
  let quick_create = global.rmml.__quick_create
  ds_map_set(global.mod_map, "enemy_events_create", quick_create)
  ds_map_set(global.mod_map, "controller_events_create", quick_create)
  ds_map_set(global.mod_map, "hitbox_events_create", quick_create)
  ds_map_set(global.mod_map, "instance_events_create", quick_create)
  ds_map_set(global.mod_map, "player_events_create", quick_create)
  ds_map_set(global.mod_map, "basic_events_create", quick_create)

  -- load the mod list
  let mods = global.rmml.__compile_mod_list("mods/modlist.txt")

  -- load each mod on the list
  let i = 0
  while i < array_length(mods) {
    global.rmml.__load_file(mods[i])
    i += 1
  }

  -- cache mod maps
  if !global.rmml.dev {
    global.rmml.__mod_map_cache = ds_map_create()
    ds_map_copy(global.rmml.__mod_map_cache, global.mod_map)
    global.rmml.__rmml_mod_map_cache = global.rmml.clone(global.rmml_map)
  }
  
  -- add controllers
  global.rmml.__add_controllers()

  global.rmml.log(["rm map", json_encode(global.mod_map)])
  global.rmml.log(["rmml map", global.rmml_map])
  global.rmml.log(["controller count", instance_number(omod_controller)])
  audio_stop_sound(loading_music)
}

global.rmml.clear()
global.rmml.log("RMML LOADED")
